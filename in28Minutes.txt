Chapter 3 : Web Application with Spring Boot


Step 03 - First Spring MVC Controller, @ResponseBody, @Controller


Step 04 - Enhancing Spring MVC Controller to provide HTML response


    @RequestMapping("say-hello-html")
	@ResponseBody
	public String sayHelloHtml() {
		StringBuffer sb = new StringBuffer();
		sb.append("<html>");
		sb.append("<head>");
		sb.append("<title> My First HTML Page - Changed</title>");
		sb.append("</head>");
		sb.append("<body>");
		sb.append("My first html page with body - Changed");
		sb.append("</body>");
		sb.append("</html>");
		
		return sb.toString();
	}
	
	
	
	
	
Step 05 - Redirect to a JSP using Spring Boot - Controller, @ResponseBody and View Resolver

    spring.mvc.view.prefix=/WEB-INF/jsp/
    spring.mvc.view.suffix=.jsp


    @RequestMapping("say-hello-jsp")
	    public String sayHelloJsp() {
		return "sayHello";
	}
	
	
	<html>
	<head>
		<title> My first HTML Page - JSP</title>
	</head>
	<body>
		My first html page with body - JSP
	</body>
    </html>
	
	
Step 08 - Capturing QueryParams using RequestParam and First Look at Model

URL  ==>  http://localhost:8080/login?name=Ali
html ==>  Welcome to the login page ${name}! 

@RequestMapping("login")
	public String gotoLoginPage(@RequestParam String name, ModelMap model) {
		model.put("name", name);
		System.out.println("Request param is " + name); //NOT RECOMMENDED FOR PROD CODE
		return "login";
	}
	
Step 09 - Quick Overview - Importance of Logging with Spring Boot

    logging.level.org.springframework=info
    logging.level.com.stro.springboot.myfirstwebapp = debug

    private Logger logger = LoggerFactory.getLogger(getClass());
	logger.debug("Request param is {}")
    logger.info("I want this printed at info level")
	
	
Step 10 - Understanding DispatcherServlet, Model 1, Model 2 and Front Controller

    Spring MVC Front Controller : DispatcherServlet
    Front Controller
    View Resolver





Step 11 - Creating a Login Form

   <html>
   <head>
    <title> Login Page</title>
   </head>
   <body>
    Welcome to the login page!
   <form method = "post">
    Name: <input type="text" name="name">
    Password: <input type="password" name="password">
    <input type="submit">
   </form>
   </body>
   </html>
   
Step 12 - Displaying Login Credentials in a JSP using Model

    @RequestMapping(value ="login", method = RequestMethod.POST)
    public String goToWelcomePage(@RequestParam String name, @RequestParam String password, ModelMap model) {
        model.put("name", name);
        model.put("password", password);
        return "welcome";
    }
	
	
Step 13 - Add hard-coded validation of userid and password

    @Service
    LoginAuthenticationService

Step 14 - Getting started with Todo Features - Creating Todo and TodoService

    Todo
    TodoService

Step 15 - Creating first version of List Todos Page

    TodoController


Step 16 - Understanding Session Versus Model Versus Request - @SessionAttributes


Step 17 - Adding JSTL to Spring Boot Project and Showing Todos in a Table

    JSTL ==> Jakarta Standard Tag Library


    ###Import###
    #Intilij#
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>jakarta.servlet.jsp.jstl</artifactId>
            <version>2.0.0</version>
        </dependency>
    #eclipce#
	    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>
        <dependency>
	        <groupId>org.eclipse.jetty</groupId>
	        <artifactId>glassfish-jstl</artifactId>
        </dependency>		
		
    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
	
	
Step 18 - Adding Bootstrap CSS framework to Spring Boot Project using webjars

    Bootstrap 
    jquery

    webjars\bootstrap\5.1.3\css\bootstrap.min-jsf.css
	webjars\bootstrap\5.1.3\js\bootstrap.min.js
    webjars\jquery\3.6.0\jquery.min.js
	
	<link href = "webjars\bootstrap\5.1.3\css\bootstrap.min-jsf.css" rel = "stylesheet">
	<script src ="webjars\bootstrap\5.1.3\js\bootstrap.min.js"></script>
    <script src ="webjars\jquery\3.6.0\jquery.min.js"></script>
	
Step 19 - Formatting JSP Pages with Bootstrap CSS Framework

   calss ="container"
   class = "table"
   
Step 20 â€“ Let's Add a New Todo - Create a New View

    <a href="add-todo" calss ="btn btn-success">Add Todo</a>
	return "redirect:list-todos";
	
Step 22 - Adding Validations using Spring Boot Starter Validation

    Command Bean (Form Backing Object)
	
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
			<form:form method="post" modelAttribute="todo">
				Description: <form:input type="text" path="description" 
								required="required"/>
				<form:input type="hidden" path="id"/>
				<form:input type="hidden" path="done"/>
			</form:form>
			
Step 23 - Using Command Beans to Implement New Todo Page Validations		
			
    @Size(min = 10, message = "Enter at least 10 characters")
    @Valid
	BindingResult
	<form:errors path="description" cssClass="text-warning"/>
	

22,23,24,25,26

    public void addTodo(String username, String description,LocalDate date,boolean done){
        Todo todo= new Todo(++countTodo,username,description,date,done);
        todos.add(todo);
    }

    public void deleteById(int id){

        Predicate<? super Todo> predicate = todo -> todo.getId() == id;
        todos.removeIf(predicate);
    }

    public Todo findById(int id){

        Predicate<? super Todo> predicate = todo -> todo.getId() == id;
        Todo todo = todos.stream().filter(predicate).findFirst().get();
        return todo;
    }
	
	    public void updateTodo(@Valid Todo todo) {
        deleteById(todo.getId());
        todos.add(todo);
    }
	
Step 27 - Adding Target Date Field to Todo Page

    spring.mvc.format.date= yyyy-MM-dd
	
	bootstrap-datepicker
	
	<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>bootstrap-datepicker</artifactId>
	<version>1.9.0</version>
    </dependency>

    webjars\bootstrap-datepicker\1.9.0\js\bootstrap-datepicker.min.js
	webjars\bootstrap-datepicker\1.9.0\css\bootstrap-datepicker.standalone.min.css
	
	<fieldset class="mb-3">
        <form:label path="targetDate">target Date</form:label>
        <form:input type="text" path="targetDate" required="required"/>
        <form:errors path="targetDate" cssClass="text-warning"/>
    </fieldset>
	
Step 28 - Adding a Navigation Bar and Implementing JSP Fragments

    Navigation Bar
	    <nav class="navbar navbar-expand-md navbar-light bg-light mb-3 p-1">
           <a class="navbar-brand m-1" href="https://courses.in28minutes.com">Stro Network</a>
           <div class="collapse navbar-collapse">
            <ul class="navbar-nav">
              <li class="nav-item"><a class="nav-link" href="/">Home</a></li>
              <li class="nav-item"><a class="nav-link" href="/list-todos">Todos</a></li>
            </ul>
           </div>
           <ul class="navbar-nav">
              <li class="nav-item"><a class="nav-link" href="/logout">Logout</a></li>
           </ul>
        </nav>
		
	JSP Fragments
	<%@ include file="common/navigation.jspf" %>
	
Step 29 - Preparing for Spring Security

    Delete login jsp and update controller to welcomeController
	
Step 30 - Setting Up Spring Security with Spring Boot Starter Security

    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

Step 31 - Configuring Spring Security with Custom User and Password Encoder

    @Configuration
public class SpringSecurityConfiguration {


@Bean
    public InMemoryUserDetailsManager inMemoryUserDetailsManager() {

    Function<String, String> passwordEncoder= input -> passwordEncoder().encode(input);

    UserDetails userDetails= User.builder().
                                           passwordEncoder(passwordEncoder)
                                           .username("stro")
                                           .password("network123")
                                           .roles("USER","ADMIN")
                                           .build();


    return new InMemoryUserDetailsManager(userDetails);
}

@Bean
    public PasswordEncoder passwordEncoder(){
      return new BCryptPasswordEncoder();
}
}

Step 32 - Refactoring and Removing Hardcoding of User ID

    private String getLoggedInUsername() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        return authentication.getName();
    }
	
Step 34 - Adding Spring Boot Starter Data JPA and Getting H2 Database-Ready

    spring.h2.console.enabled=true
    spring.datasource.url=jdbc:h2:mem:testdb 

    <dependency>
	    <groupId>org.springframework.boot</groupId>
	    <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <dependency>
	    <groupId>com.h2database</groupId>
	    <artifactId>h2</artifactId>
	    <scope>runtime</scope>
    </dependency>
	
Step 35 - 01 - Configuring Spring Security to Get H2 Console Working

    SecurityFilterChain : 
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		
		http.authorizeHttpRequests(
				auth -> auth.anyRequest().authenticated());
		http.formLogin(withDefaults());

		http.csrf(csrf -> csrf.disable());
		http.headers(headers -> headers.frameOptions(frameOptionsConfig-> frameOptionsConfig.disable()));
		
		return http.build();
	}
	
Step 36 - Making Todo an Entity and Population Todo Data into H2

    @Entity(name = "TODOApp")
    @Id
    @GeneratedValue
	@Column(name = "name")
	
	spring.jpa.defer-datasource-initialization = true
	
	insert into TODO (ID,USERNAME,DESCRIPTION,TARGET_DATE,DONE)
    values(1001,'stro','Lear DevOps',CURRENT_DATE(),false);
	
Step 37 - Creating TodoRepository and Connecting List Todos Page from H2 Database

    public interface TodoRepository extends JpaRepository<Todo, Integer> {

    public List<Todo> findByUsername(String username);
	
    }
	
Step 38 - 02 - Exploring Magic of Spring Boot Starter JPA and JpaRepository

    spring.jpa.show-sql = true // to show what happen in background in jpa

Step 41 - Optional Hands-On - Connecting Todo App to MySQL database

    docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=todos-user --env MYSQL_PASSWORD=dummytodos --env MYSQL_DATABASE=todos --name mysql --publish 3308:3306 mysql:8-oracle
	
	<dependency>
        <groupId>com.mysql</groupId>
	    <artifactId>mysql-connector-j</artifactId>
    </dependency>
	
	
	spring.datasource.url=jdbc:mysql://localhost:3308/todos
    spring.datasource.username=todos-user
    spring.datasource.password=dummytodos
    spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
    spring.jpa.hibernate.ddl-auto=update
	
	mysqlshell:
	#/connect todos-user@localhost:3306
	
Chapter 4 : Introduction to JUnit
    @Test
	fail("Not yet implemented")
	assertEquals(3, todos.size());
	assertTrue("Somthing went wrong",test);
	assertFalse(test2);
	assertArrayEquals(new int[] {1,2}, new int[] {2, 1});
	assertNull();
	assertNotNull();
	@BeforAll    // must be static beacuse it is a class level method
	@BeforEach
	@AfterEach
	void afterEach() {
		System.out.println("AfterEach");
	}

	@AfterAll // must be static
	static void afterAll() {
		System.out.println("afterAll");
	}
Chapter 5 : Introduction to Mockito

stub // mock

Chapter 6 : Spring Boot Deep Dive with a REST API

Step 05 - Exploring Path Params and Path Variables with Spring 

	@RequestMapping("/hello-world-path-param/{name}")
	public HelloWorldBean helloWorldPathParam(@PathVariable String name) {
		return new HelloWorldBean("Hello World, " + name);
	}
	
	@RequestMapping("/hello-world-path-param/{name}/message/{message}")
	public HelloWorldBean helloWorldMultiplePathParam
					(@PathVariable String name,
							@PathVariable String message) {
		return new HelloWorldBean("Hello World " + name + "," + message);
	}


Step 11 - Creating Spring Boot REST API to create Survey Question - POST

@RequestMapping(value="/surveys/{surveyId}/questions", method = RequestMethod.POST)
public void addNewSurveyQuestion(@PathVariable String surveyId,
		@RequestBody Question question){
	
	surveyService.addNewSurveyQuestion(surveyId, question);
	
}


{
   "id": "Question4",
    "description": "Your Favorite Cloud Platform",
    "options": [
        "AWS",
        "Azure",
        "Google Cloud",
        "Oracle Cloud"
    ],
    "correctAnswer": "Oracle Cloud"
}


Step 12 - Improving POST Method - Status CREATED and Location Header


    private static String generateRandomId() {
        SecureRandom secureRandom = new SecureRandom();
        String randomId = new BigInteger(32, secureRandom).toString();
        return randomId;
    }
	
	
	@RequestMapping(value ="/survey/{surveyId}/questions", method = RequestMethod.POST)
    public ResponseEntity<Object> addNewSurveyQuestion(@PathVariable String surveyId, @RequestBody Question question){

        String questionId = surveyService.addNewSurveyQuestion(surveyId,question);

        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{question}").buildAndExpand(questionId).toUri();

        return ResponseEntity.created(location).build();
    }
	
Step 15 - Setting Up Spring Boot Data JPA with H2 Database and User Entity


Step 16 - Exploring Spring Boot Data JPA Using Command-Line Runner


@Component
public class UserDetailsCommandLineRunner implements CommandLineRunner {

	public UserDetailsCommandLineRunner(UserDetailsRepository repository) {
		super();
		this.repository = repository;
	}

	private Logger logger = LoggerFactory.getLogger(getClass());

	private UserDetailsRepository repository;

	@Override
	public void run(String... args) throws Exception {
		repository.save(new UserDetails("Ranga", "Admin"));
		repository.save(new UserDetails("Ravi", "Admin"));
		repository.save(new UserDetails("John", "User"));
		
		//List<UserDetails> users = repository.findAll();
		
		List<UserDetails> users = repository.findByRole("Admin");
		
		users.forEach(user -> logger.info(user.toString()));
		
		
	}
	
	http://localhost:8080/userDetailses?sort=name
	
Step 18 - Writing Your First Spring Boot Integration Test
Step 19 - Writing Asserts for JSON in Spring Boot Tests - JsonAssert

class JsonAssertTest {

	@Test
	void jsonAssert_learningBasics() throws JSONException {
		
		String expectedResponse =
				"""
				{
					"id":"Question1",
					"description":"Most Popular Cloud Platform Today",
					"correctAnswer":"AWS"
				}
				""";
		
		String actualResponse =
				"""
				  {"id":"Question1",
				  "description":"Most Popular Cloud Platform Today",
				  "options":["AWS","Azure","Google Cloud","Oracle "],
				  "correctAnswer":"AWS"}
				""";

		JSONAssert.assertEquals(expectedResponse, actualResponse, false);
	}
}




@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class SurveyResourceIT {
	
	String str = """
			{
			  "id": "Question1",
			  "description": "Most Popular Cloud Platform Today",
			  "options": [
			    "AWS",
			    "Azure",
			    "Google Cloud",
			    "Oracle Cloud"
			  ],
			  "correctAnswer": "AWS"
			}
			
			""";
	
	private static String SPECIFIC_QUESTION_URL = "/surveys/Survey1/questions/Question1";
	
	@Autowired
	private TestRestTemplate template;

	
	@Test
	void retrieveSpecificSurveyQuestion_basicScenario() throws JSONException {
		ResponseEntity<String> responseEntity = template.getForEntity(SPECIFIC_QUESTION_URL, String.class);

		String expectedResponse =
				"""
				{
					"id":"Question1",
					"description":"Most Popular Cloud Platform Today",
					"correctAnswer":"AWS"
				}
				""";

		JSONAssert.assertEquals(expectedResponse, responseEntity.getBody(), false);

	}
}


Step 20 - Improving JUnit Asserts for Spring Boot Integration Test


	assertTrue(responseEntity.getStatusCode().is2xxSuccessful());
	assertEquals("application/json", responseEntity.getHeaders().get("Content-Type").get(0));
	
Step 21 - Writing Spring Boot Integration Test for GET Method Returning List

    @Test
	    void retrieveAllSurveyQuestions_basicScenario() throws JSONException {
		
		    ResponseEntity<String> responseEntity = template.getForEntity(GENERIC_QUESTIONS_URL, String.class);

		    String expectedResponse =
				"""
						[
						  {
						    "id": "Question1"
						  },
						  {
						    "id": "Question2"
						  },
						  {
						    "id": "Question3"
						  }
						]
				
				""";

		    assertTrue(responseEntity.getStatusCode().is2xxSuccessful());
		    assertEquals("application/json", responseEntity.getHeaders().get("Content-Type").get(0));
		
		    JSONAssert.assertEquals(expectedResponse, responseEntity.getBody(), false);
		 
	}
	
	
Step 22 - Writing Spring Boot Integration Test for POST method creating a Question
Step 23 - Understanding JUnit Best Practice - Have ZERO Side Effects


   @Test
   void addNewSurveyQuestion_basicScenario() {

	String requestBody = """
				{
				  "description": "Your Favorite Language",
				  "options": [
				    "Java",
				    "Python",
				    "JavaScript",
				    "Haskell"
				  ],
				  "correctAnswer": "Java"
				}
			""";

	
	HttpHeaders headers = new HttpHeaders();
	headers.add("Content-Type", "application/json");
	
	HttpEntity<String> httpEntity = new HttpEntity<String>(requestBody, headers);
	
	ResponseEntity<String> responseEntity 
		= template.exchange(GENERIC_QUESTIONS_URL, HttpMethod.POST, httpEntity, String.class);
	
	assertTrue(responseEntity.getStatusCode().is2xxSuccessful());
	
	String locationHeader = responseEntity.getHeaders().get("Location").get(0);
	assertTrue(locationHeader.contains("/surveys/Survey1/questions/"));
	
	//DELETE
	//locationHeader
	//REMOVE SIDE EFFECT	
	template.delete(locationHeader);
	
   }


Step 24 - Writing Your First Spring Boot Mock MVC Unit Test
Step 25 - Improving Asserts for Spring Boot Mock MVC Unit Test
Step 26 - Writing Spring Boot Mock MVC Unit Test for POST Method


     @WebMvcTest(controllers = SurveyResource.class)
class SurveyResourceTest {
	
	@MockBean
	private SurveyService surveyService;
	
	@Autowired
	private MockMvc mockMvc;
	
	private static String SPECIFIC_QUESTION_URL = "http://localhost:8080/surveys/Survey1/questions/Question1";
	
	private static String GENERIC_QUESTION_URL = "http://localhost:8080/surveys/Survey1/questions/";
	
	@Test
	void retrieveSpecificSurveyQuestion_404Scenario() throws Exception {
		RequestBuilder requestBuilder = 
				MockMvcRequestBuilders.get(SPECIFIC_QUESTION_URL).accept(MediaType.APPLICATION_JSON);
		
		MvcResult mvcResult = mockMvc.perform(requestBuilder).andReturn();
		
		assertEquals(404, mvcResult.getResponse().getStatus());
		
	}

	
	@Test
	void retrieveSpecificSurveyQuestion_basicScenario() throws Exception {
		RequestBuilder requestBuilder = 
				MockMvcRequestBuilders.get(SPECIFIC_QUESTION_URL).accept(MediaType.APPLICATION_JSON);
		
		
		Question question = new Question("Question1", "Most Popular Cloud Platform Today",
				Arrays.asList("AWS", "Azure", "Google Cloud", "Oracle Cloud"), "AWS");

		when(surveyService.retrieveSpecificSurveyQuestion("Survey1", "Question1")).thenReturn(question);
		
		MvcResult mvcResult = mockMvc.perform(requestBuilder).andReturn();		
	
		String expectedResponse = """
				{
				
					"id":"Question1",
					"description":"Most Popular Cloud Platform Today",
					"options":["AWS","Azure","Google Cloud","Oracle Cloud"],
					"correctAnswer":"AWS"
				
				}
						
				"""; 
		
		
		MockHttpServletResponse response = mvcResult.getResponse();
		
		assertEquals(200, response.getStatus());
		JSONAssert.assertEquals(expectedResponse, response.getContentAsString(), false);
		
		
	}
	
	@Test
	void addNewSurveyQuestion_basicScenario() throws Exception {

		String requestBody = """
				{
				  "description": "Your Favorite Language",
				  "options": [
				    "Java",
				    "Python",
				    "JavaScript",
				    "Haskell"
				  ],
				  "correctAnswer": "Java"
				}
			""";
		
		when(surveyService.addNewSurveyQuestion(anyString(),any())).thenReturn("SOME_ID");

		RequestBuilder requestBuilder = 
				MockMvcRequestBuilders.post(GENERIC_QUESTION_URL)
				.accept(MediaType.APPLICATION_JSON)
				.content(requestBody).contentType(MediaType.APPLICATION_JSON);

		MvcResult mvcResult = mockMvc.perform(requestBuilder).andReturn();		
		
		MockHttpServletResponse response = mvcResult.getResponse();
		String locationHeader = response.getHeader("Location");
		
		assertEquals(201, response.getStatus());
		assertTrue(locationHeader.contains("/surveys/Survey1/questions/SOME_ID"));
		
	}
	
}


Step 27 - Getting Started with Spring Boot Starter Security
Step 28 - Configuring Spring Security for Spring Boot REST API

    <dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-security</artifactId>
	</dependency>

    /src/main/java/com/in28minutes/springboot/firstrestapi/security/SpringSecurityConfiguration.java New


     changes :
	 
	 	method : SecurityFilterChain  // http.httpBasic(withDefaults());





Chapter 8 : Appendix - Introduction to JPA with Spring Boot in 10 Steps

Step 05 - Inserting Hardcoded Data Using Spring JDBC

    **add CourseJdbcRepository
	
    @Repository
    public class CourseJdbcRepository {

    @Autowired
    private JdbcTemplate springJdbcTemplate;

    private static String INSERT_QUERY = """
            insert into course (id ,name ,author )
            values(1,'Learn AWS','stro')
            """;

    public void insert() {

        springJdbcTemplate.update(INSERT_QUERY);
    }
    }

    ** add CourseCommandLineRunner
    @Component
       public class CourseCommandLineRunner implements CommandLineRunner {

       @Autowired
       private CourseJdbcRepository repository;

       @Override
       public void run(String... args) throws Exception {
        repository.insert();
       }
    }

Step 06 - Inserting and Deleting Data Using Spring JDBC


    **update CourseJdbcRepository

     @Repository
    public class CourseJdbcRepository {

        @Autowired
        private JdbcTemplate springJdbcTemplate;

        private static String INSERT_QUERY = """
            insert into course (id ,name ,author )
            values(?,?,?)
            """;

        private static String DELETE_QUERY = """
            DELETE FROM course 
            WHERE course.ID = ?
            """;

        public void insert(Course course) {

          springJdbcTemplate.update(INSERT_QUERY,course.getId(),course.getName(),course.getAuthor());
       }


        public void deleteById(long id) {

          springJdbcTemplate.update(DELETE_QUERY,id);
        }
    }


    **update CourseCommandLineRunner


    @Component
    public class CourseCommandLineRunner implements CommandLineRunner {

        @Autowired
        private CourseJdbcRepository repository;

        @Override
        public void run(String... args) throws Exception {
          repository.insert(new Course(1,"Learn Java 102","stro"));
           repository.insert(new Course(2,"Learn DevOps","stro"));
           repository.insert(new Course(3,"Learn Oracle Cloud","stro"));
          repository.deleteById(1);
        }
    }


Step 07 - Querying Data using Spring JDBC


**update CourseJdbcRepository

    public Course findById(long id) {

        return springJdbcTemplate.queryForObject(SELECT_QUERY,new BeanPropertyRowMapper<>(Course.class),id);
    }
	
**update CourseCommandLineRunner

    System.out.println(repository.findById(3));
	
	
Step 08 - Getting Started with JPA and EntityManager
spring.jpa.show-sql = true


**add CourseJpaRepository

@Repository
@Transactional
public class CourseJpaRepository {

    @PersistenceContext
    private EntityManager entityManager;

    public void insert(Course course) {
        entityManager.merge(course);
    }

    public Course findById(long id) {
        return entityManager.find(Course.class, id);
    }

    public void deleteById(long id) {
        Course course = findById(id);
        entityManager.remove(course);
    }
}




**update CourseCommandLineRunner

    //    @Autowired
    //    private CourseJdbcRepository repository;
    @Autowired
    private CourseJpaRepository repository;
	
	
	
Step 10 - Getting Started with Spring Data JPA

**add CourseSpringDataJpaRepository

public interface CourseSpringDataJpaRepository extends JpaRepository<Course, Long> {
}


**update CourseCommandLineRunner

    //    @Autowired
    //    private CourseJdbcRepository repository;
    //    @Autowired
    //    private CourseJpaRepository repository;
	
	
Step 11 - Exploring Features of Spring Data JPA


    **update CourseCommandLineRunner

        repository.save(new Course(1,"Learn Java 102 Jpa","stro"));
        repository.save(new Course(2,"Learn DevOps Jpa","stro"));
        repository.save(new Course(3,"Learn Oracle Cloud Jpa","moath"));
        repository.deleteById(1l);
        System.out.println(repository.findById(3l));

        System.out.println(repository.findAll());
        System.out.println(repository.count());
        System.out.println(repository.findByAuthor("stro"));
        System.out.println(repository.findByAuthor(""));
		System.out.println(repository.findByName("Learn Java 102 Jpa"));
		
		
**update CourseSpringDataJpaRepository


    List<Course> findByAuthor(String author);
    List<Course> findByName(String name);
	
	
	
